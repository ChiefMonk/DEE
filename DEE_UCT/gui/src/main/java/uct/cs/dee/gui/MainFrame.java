/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package uct.cs.dee.gui;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import uct.cs.dee.lib.*;
import uct.cs.dee.lib.models.*;
import org.tweetyproject.logics.pl.parser.PlParser;
import org.tweetyproject.logics.pl.syntax.PlBeliefSet;
import org.tweetyproject.logics.pl.syntax.PlFormula;

import com.formdev.flatlaf.FlatLightLaf;
import javax.swing.text.BadLocationException;
import org.tweetyproject.commons.ParserException;

/**
 *
 * @author SteveW
 */
public class MainFrame extends javax.swing.JFrame {

    private PlBeliefSet _knowledgeBaseSet;
    private PlFormula _queryFormula;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FileChooserKnowledgeBase = new javax.swing.JFileChooser();
        MainPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaException = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        btnClearOutputs = new javax.swing.JButton();
        btnExitApplication = new javax.swing.JButton();
        btnClearInputs = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        textAreaOutputExplanations = new javax.swing.JTextArea();
        txtAreaOutputExplanations = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaOutputKnowledgeBase = new javax.swing.JTextArea();
        lblOutput = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        textAreaOutputBaseRank = new javax.swing.JTextArea();
        lblOutput3 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaInputKnowledgeBase = new javax.swing.JTextArea();
        textInputQuery = new javax.swing.JTextField();
        lblQuery = new javax.swing.JLabel();
        lblQuery1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnVerifyInputQuery = new javax.swing.JButton();
        btnVerifyKnowledgeBase = new javax.swing.JButton();
        btnVerifyAndComputeAll = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        textAreaOutputEntailment = new javax.swing.JTextArea();
        lblOutput4 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        textAreaOutputJustification = new javax.swing.JTextArea();
        txtAreaOutputJustification = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtAreaException.setEditable(false);
        txtAreaException.setColumns(20);
        txtAreaException.setRows(5);
        jScrollPane3.setViewportView(txtAreaException);

        btnClearOutputs.setText("Clear All Outputs");
        btnClearOutputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearOutputsClicked(evt);
            }
        });

        btnExitApplication.setText("Exit Application");
        btnExitApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitApplicationClicked(evt);
            }
        });

        btnClearInputs.setText("Clear All Inputs");
        btnClearInputs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearInputsClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(411, Short.MAX_VALUE)
                .addComponent(btnClearInputs, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClearOutputs, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExitApplication, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearOutputs)
                    .addComponent(btnClearInputs)
                    .addComponent(btnExitApplication))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 1, true));

        textAreaOutputExplanations.setEditable(false);
        textAreaOutputExplanations.setColumns(20);
        textAreaOutputExplanations.setRows(5);
        textAreaOutputExplanations.setFocusable(false);
        textAreaOutputExplanations.setRequestFocusEnabled(false);
        textAreaOutputExplanations.setVerifyInputWhenFocusTarget(false);
        jScrollPane4.setViewportView(textAreaOutputExplanations);

        txtAreaOutputExplanations.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAreaOutputExplanations.setText("Explanations :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtAreaOutputExplanations)
                        .addGap(0, 932, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtAreaOutputExplanations)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 1, true));

        textAreaOutputKnowledgeBase.setEditable(false);
        textAreaOutputKnowledgeBase.setColumns(20);
        textAreaOutputKnowledgeBase.setRows(5);
        textAreaOutputKnowledgeBase.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textAreaOutputKnowledgeBase.setFocusable(false);
        textAreaOutputKnowledgeBase.setRequestFocusEnabled(false);
        textAreaOutputKnowledgeBase.setVerifyInputWhenFocusTarget(false);
        jScrollPane2.setViewportView(textAreaOutputKnowledgeBase);

        lblOutput.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOutput.setText("The Knowledge Base :");

        textAreaOutputBaseRank.setEditable(false);
        textAreaOutputBaseRank.setColumns(20);
        textAreaOutputBaseRank.setRows(5);
        textAreaOutputBaseRank.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textAreaOutputBaseRank.setFocusable(false);
        textAreaOutputBaseRank.setRequestFocusEnabled(false);
        textAreaOutputBaseRank.setVerifyInputWhenFocusTarget(false);
        jScrollPane6.setViewportView(textAreaOutputBaseRank);

        lblOutput3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOutput3.setText("BaseRank (Ranking of Classical Statements)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(lblOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 366, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOutput3, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutput)
                    .addComponent(lblOutput3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 1, true));

        textAreaInputKnowledgeBase.setColumns(20);
        textAreaInputKnowledgeBase.setRows(10);
        textAreaInputKnowledgeBase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaInputKnowledgeBaseKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(textAreaInputKnowledgeBase);

        lblQuery.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblQuery.setText("Enter the Defeasible Query (Does the KB entail this query?):");

        lblQuery1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblQuery1.setText("Define your Defeasible Knowledge Base :");

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 204, 255)));

        btnVerifyInputQuery.setText("Verify Query");
        btnVerifyInputQuery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyInputQueryClicked(evt);
            }
        });

        btnVerifyKnowledgeBase.setText("Verify Knowledge Base");
        btnVerifyKnowledgeBase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyKnowledgeBaseClicked(evt);
            }
        });

        btnVerifyAndComputeAll.setText("Verify and Compute Entailment and Explanations");
        btnVerifyAndComputeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerifyAndComputeAllClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVerifyAndComputeAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnVerifyKnowledgeBase)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVerifyInputQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnVerifyInputQuery)
                    .addComponent(btnVerifyKnowledgeBase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVerifyAndComputeAll)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblQuery1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(lblQuery, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(textInputQuery)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuery)
                    .addComponent(lblQuery1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(textInputQuery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 20)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("~ DEE - Defeasible Entailment and Explanations ~");
        jLabel9.setAlignmentY(0.0F);
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("University of Cape Town, Department of Computer Science");
        jLabel10.setToolTipText("");
        jLabel10.setAlignmentY(0.0F);
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("chipo@cs.uct.ac.za");
        jLabel11.setToolTipText("he email address of the author");
        jLabel11.setAlignmentY(0.0F);
        jLabel11.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 1027, Short.MAX_VALUE)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 1, true));

        textAreaOutputEntailment.setEditable(false);
        textAreaOutputEntailment.setColumns(20);
        textAreaOutputEntailment.setRows(5);
        textAreaOutputEntailment.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textAreaOutputEntailment.setFocusable(false);
        textAreaOutputEntailment.setRequestFocusEnabled(false);
        textAreaOutputEntailment.setVerifyInputWhenFocusTarget(false);
        jScrollPane7.setViewportView(textAreaOutputEntailment);

        lblOutput4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblOutput4.setText("Entailment");

        textAreaOutputJustification.setEditable(false);
        textAreaOutputJustification.setColumns(20);
        textAreaOutputJustification.setRows(5);
        textAreaOutputJustification.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        textAreaOutputJustification.setFocusable(false);
        textAreaOutputJustification.setRequestFocusEnabled(false);
        textAreaOutputJustification.setVerifyInputWhenFocusTarget(false);
        jScrollPane8.setViewportView(textAreaOutputJustification);

        txtAreaOutputJustification.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtAreaOutputJustification.setText("The Rankings");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblOutput4, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane8)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(txtAreaOutputJustification, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutput4)
                    .addComponent(txtAreaOutputJustification))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(3, 3, 3)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
        
   // <editor-fold defaultstate="collapsed" desc="Generated Code">      
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser FileChooserKnowledgeBase;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JButton btnClearInputs;
    private javax.swing.JButton btnClearOutputs;
    private javax.swing.JButton btnExitApplication;
    private javax.swing.JButton btnVerifyAndComputeAll;
    private javax.swing.JButton btnVerifyInputQuery;
    private javax.swing.JButton btnVerifyKnowledgeBase;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblOutput3;
    private javax.swing.JLabel lblOutput4;
    private javax.swing.JLabel lblQuery;
    private javax.swing.JLabel lblQuery1;
    private javax.swing.JTextArea textAreaInputKnowledgeBase;
    private javax.swing.JTextArea textAreaOutputBaseRank;
    private javax.swing.JTextArea textAreaOutputEntailment;
    private javax.swing.JTextArea textAreaOutputExplanations;
    private javax.swing.JTextArea textAreaOutputJustification;
    private javax.swing.JTextArea textAreaOutputKnowledgeBase;
    private javax.swing.JTextField textInputQuery;
    private javax.swing.JTextArea txtAreaException;
    private javax.swing.JLabel txtAreaOutputExplanations;
    private javax.swing.JLabel txtAreaOutputJustification;
    // End of variables declaration//GEN-END:variables

   // </editor-fold>
    
   // <editor-fold defaultstate="collapsed" desc="EVENT HANDLERS">
    private void btnClearOutputsClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearOutputsClicked
        textAreaOutputKnowledgeBase.setText("");
        textAreaOutputBaseRank.setText("");
        textAreaOutputEntailment.setText("");
        textAreaOutputJustification.setText("");
        textAreaOutputExplanations.setText("");
    }//GEN-LAST:event_btnClearOutputsClicked

    private void btnExitApplicationClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitApplicationClicked
        System.exit(0);// TODO add your handling code here:
    }//GEN-LAST:event_btnExitApplicationClicked

    private void btnClearInputsClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearInputsClicked
       textAreaInputKnowledgeBase.setText("");
       textInputQuery.setText("");
    }//GEN-LAST:event_btnClearInputsClicked

    private void btnVerifyInputQueryClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyInputQueryClicked

        try
        {
            _queryFormula = null;
            
            String inputQueryString = textInputQuery.getText();
             
            if (inputQueryString == null || inputQueryString.isEmpty())
                throw new Exception("Please enter a valid defeasible input query. It must contain a defeasible implication connective (~>)");     
                       
            if (!inputQueryString.contains("~>"))             
                throw new Exception("The specified input query is not a defeasible statement.\nPlease correct and try again");    
             
            initQuery(inputQueryString);             
        }
        catch(Exception ex)
        {
            showErrorPopupMessage(ErrorInputQuery, ex);
        }
        
    }//GEN-LAST:event_btnVerifyInputQueryClicked

    private void btnVerifyKnowledgeBaseClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyKnowledgeBaseClicked
      
        try
        {
            btnClearOutputsClicked(evt);
            _knowledgeBaseSet = null;
                    
            String inputKnowledgeBase = textAreaInputKnowledgeBase.getText();             
            if (inputKnowledgeBase == null || inputKnowledgeBase.isEmpty())
                throw new Exception("Please define a valid defeasible knowledge base."); 
            
             List<String> kbStatementList = new ArrayList<String>();             
             
             int lineNumber = 1;
             for (String line : inputKnowledgeBase.split("\\n")){
                 
                if (line == null || line.isEmpty())
                    continue;
                  
                textAreaOutputExplanations.append(String.format("%s: %s\n",lineNumber, line.trim()));                  
                kbStatementList.add(line.trim());
                lineNumber++;
             }
            
            initKnowledgeBase(inputKnowledgeBase);                        
        }
        catch(Exception ex)
        {
            showErrorPopupMessage(ErrorInputKnowledgeBase, ex);
        }
        
    }//GEN-LAST:event_btnVerifyKnowledgeBaseClicked

    private void btnVerifyAndComputeAllClicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerifyAndComputeAllClicked
       
        btnVerifyKnowledgeBaseClicked(evt);
        btnVerifyInputQueryClicked(evt);
        
        if(_knowledgeBaseSet == null || _queryFormula == null)
            return;
        
        try 
        {
            computeDefeasibleExplanation(_knowledgeBaseSet, _queryFormula);
        } 
        catch (Exception ex) 
        {
             showErrorPopupMessage("Defeasible Entailment and Justification Computation Error", ex);           
        }                
    }//GEN-LAST:event_btnVerifyAndComputeAllClicked

    private void textAreaInputKnowledgeBaseKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaInputKnowledgeBaseKeyPressed
         trunkTextArea(textAreaInputKnowledgeBase);
    }//GEN-LAST:event_textAreaInputKnowledgeBaseKeyPressed

    // </editor-fold>
       
   // <editor-fold defaultstate="collapsed" desc="ERROR MESSAGES">
    private final String ErrorInputKnowledgeBase = "Input Defeasible Knowledge Base";
    private final String ErrorInputQuery = "Input Defeasible Query";
    private final String ErrorDefaultTitle = "Invalid Error Occurred";
    
    private void showErrorPopupMessage(String title, String errorMessage) {
         if (errorMessage == null || errorMessage.isEmpty())
             return;
         
         if (title == null || title.isEmpty())
             title = ErrorDefaultTitle;
         
         JOptionPane.showMessageDialog(this, errorMessage, title, JOptionPane.ERROR_MESSAGE);
    }
        
    private void showErrorPopupMessage(String errorMessage) {       
        showErrorPopupMessage(ErrorDefaultTitle, errorMessage);
    }
    
    private void showErrorPopupMessage(String title, Exception exception) {
         if (exception == null)
             return;
         
         if (title == null || title.isEmpty())
             title = ErrorDefaultTitle;
         
        Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, title, exception);
        showErrorPopupMessage(title,exception.getMessage());
    }
    
    private void showErrorPopupMessage(Exception exception) {       
        showErrorPopupMessage(ErrorDefaultTitle, exception);
    }
    
    // </editor-fold>
    
   // <editor-fold defaultstate="collapsed" desc="PRIVATE METHODS">      
    private void initKnowledgeBase(String knowledgeBaseString) throws ParserException, Exception
    {
        _knowledgeBaseSet = new PlBeliefSet();
        PlParser cp = new PlParser();
        DefeasibleLogicParser dp = new DefeasibleLogicParser(cp);       
                    
        for (String line : knowledgeBaseString.split("\\n"))
        {
            if (line == null || line.isEmpty())
                continue;
            
           if (line.contains("~>"))
                _knowledgeBaseSet.add(dp.parseFormula(line));
            else
                _knowledgeBaseSet.add(cp.parseFormula(line));                      
        }
        
        textAreaOutputKnowledgeBase.setText("");        
        int lineNumber = 1;
        for (PlFormula plFormula : _knowledgeBaseSet)
        {          
            textAreaOutputBaseRank.append(String.format("%s: %s\n",lineNumber, plFormula));               
            lineNumber++;            
        }
                  
       // textAreaOutputKnowledgeBase.setText("Knowledge Base:\n" + _knowledgeBaseSet.toString() + "\n");
    }
    
    private void initQuery(String queryString) throws ParserException, Exception
    {        
        PlParser classicalParser = new PlParser();
        DefeasibleLogicParser defeasibleParser = new DefeasibleLogicParser(classicalParser);
        _queryFormula = defeasibleParser.parseFormula(queryString);
        textAreaOutputExplanations.append("Query:\n" + _queryFormula.toString() + "\n");
    }
    
    private void computeDefeasibleExplanation(PlBeliefSet knowledgeBase, PlFormula query) throws Exception
    {
        List<PlFormula> classicalFormulas = Utils.getClassicalFormulas(knowledgeBase);
        
        RationalClosureResults rationalClosure = RationalClosure.computeRationalClosure(knowledgeBase, query);
        System.out.println(rationalClosure);
        
        if (!rationalClosure.entailmentsHolds())
        {
            textAreaOutputEntailment.append("Entailment does not hold." + "\n");
            textAreaOutputEntailment.append("Following remaining formulas does not entail the query: \n" + rationalClosure.getRemainingFormulas() + "\n");
            return;
        }
        
        int ranksRemoved = rationalClosure.getRanksRemoved();
        
        if (ranksRemoved == 0)
        {
            Node rootNode = ClassicJust.computeJustification(Utils.materialise(knowledgeBase), Utils.materialise(query));
            List<List<PlFormula>> justifiactions = rootNode.getAllJustifications();
            List<List<PlFormula>> dematerialisedJustification = new ArrayList<List<PlFormula>>();
            for (List<PlFormula> justification : justifiactions)
            {
                dematerialisedJustification.add(Utils.dematerialise(justification, classicalFormulas));
            }
            textAreaOutputJustification.append("<<Final Justification>>\n");
            for (List<PlFormula> newJust : dematerialisedJustification)
            {
                textAreaOutputJustification.append(Utils.printJustificationAsCSV(newJust) + "\n");
            }
            return;
        }
        
        int i = 0;
        
        while (i < ranksRemoved)
        {
            knowledgeBase = Utils.remove(knowledgeBase, rationalClosure.getMinimalRanking().getFinitlyRankedFormula(i));
            textAreaOutputJustification.append("Removing rank " + i + " =====" + "\n");
            textAreaOutputJustification.append(knowledgeBase.toString()+ "\n");
            i ++;
        }
        
        Node rootNode = ClassicJust.computeJustification(Utils.materialise(knowledgeBase), Utils.materialise(query));
        List<List<PlFormula>> justifiactions = rootNode.getAllJustifications();
        List<List<PlFormula>> dematerialisedJustification = new ArrayList<List<PlFormula>>();
        for (List<PlFormula> justification : justifiactions)
        {
            dematerialisedJustification.add(Utils.dematerialise(justification, classicalFormulas));
        }
        
        textAreaOutputJustification.append("<<Final Justification>>"+ "\n");
        for (List<PlFormula> newJust : dematerialisedJustification)
        {
            textAreaOutputJustification.append(Utils.printJustificationAsCSV(newJust)+ "\n");
        }
        
    }
    
    final int SCROLL_BUFFER_SIZE = 10;
    private void trunkTextArea(javax.swing.JTextArea txtWin)
    {
        int numLinesToTrunk = txtWin.getLineCount() - SCROLL_BUFFER_SIZE;
        if(numLinesToTrunk > 0)
        {
            try
            {
                int posOfLastLineToTrunk = txtWin.getLineEndOffset(numLinesToTrunk - 1);
                txtWin.replaceRange("",0,posOfLastLineToTrunk);
            }
            catch (BadLocationException ex) {             
            }
        }
    }
    
    // </editor-fold>

   // <editor-fold defaultstate="collapsed" desc="MAIN METHOD">
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
        	FlatLightLaf.setup();

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            	java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.WARNING, "LookAndFeels: " + info.getName());
            	
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                   // break;
                }
                
                javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
            }
            
            javax.swing.UIManager.setLookAndFeel( new FlatLightLaf() );
            
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // </editor-fold>    
}
